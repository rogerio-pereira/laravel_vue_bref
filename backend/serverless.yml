useDotenv: true
service: "bref"

plugins:
    # We need to include the Bref plugin
    - ./vendor/bref/bref
    - ./vendor/bref/extra-php-extensions
    - serverless-lift

resources:
    Resources:
        # Create our S3 storage bucket using CloudFormation
        S3:
            Type: AWS::S3::Bucket
            Properties:
                BucketName: ${env:AWS_BUCKET}
                PublicAccessBlockConfiguration:
                    BlockPublicAcls: false
                OwnershipControls:
                    Rules:
                        - ObjectOwnership: ObjectWriter

        S3BucketPolicy:
            Type: AWS::S3::BucketPolicy
            Properties:
                Bucket: 
                    Ref: S3
                PolicyDocument:
                    Statement:
                        -   Effect: Allow
                            Principal: "*"
                            Action:
                                - "s3:PutObject"
                                - "s3:GetObject"
                                - "s3:DeleteObject"
                            Resource: !Sub '${S3.Arn}/*'

        SQS:
            Type: AWS::SQS::Queue
            Properties:
                QueueName: ${env:SQS_QUEUE}

        # Create SSL certificate
        Certificate:
            Type: "AWS::CertificateManager::Certificate"
            Properties:
                DomainName: ${env:AWS_DOMAIN}
                ValidationMethod: DNS

        # Add custom domain to API Gateway
        ApiGatewayCustomDomain:
            Type: AWS::ApiGatewayV2::DomainName
            Properties:
                DomainName: ${env:AWS_DOMAIN}
                DomainNameConfigurations:
                    -   EndpointType: REGIONAL
                        CertificateArn: !Ref Certificate
                        SecurityPolicy: TLS_1_2

        # ApiGateway API, auto generated by Bref
        HttpApi:
            Type: AWS::ApiGatewayV2::Api

        HttpApiMapping:
            Type: AWS::ApiGatewayV2::ApiMapping
            Properties:
                ApiId: !Ref HttpApi
                DomainName: !Ref ApiGatewayCustomDomain
                Stage: $default

        DnsRecord:
            Type: "AWS::Route53::RecordSet"
            Properties:
                HostedZoneName: ${env:AWS_HOST}.    # Need . in the end
                Name: ${env:AWS_DOMAIN}
                Type: 'A'
                AliasTarget:
                    DNSName: !GetAtt ApiGatewayCustomDomain.RegionalDomainName
                    HostedZoneId: Z1UJRXOUMOOFQ8 #us-east-1

provider:
    name: aws
    # The AWS region in which to deploy (us-east-1 is the default)
    region: us-east-1
    iam:
        role:
            statements:
                -   Effect: Allow
                    Action:
                        - s3:PutObject
                        - s3:GetObject
                        - s3:DeleteObject
                    Resource:
                        - !Sub '${S3.Arn}' # the storage bucket
                        - !Sub '${S3.Arn}/*' # and everything inside
    # Environment variables
    environment:
        APP_ENV: local # Or use ${sls:stage} if you want the environment to match the stage
        FILESYSTEM_DISK: s3
        AWS_BUCKET: ${env:AWS_BUCKET}
        # QUEUE_CONNECTION: sqs
        # SQS_PREFIX: ${env:SQS_PREFIX} 
        # SQS_QUEUE: ${env:SQS_QUEUE}

package:
    # Files and directories to exclude from deployment
    patterns:
        - '!node_modules/**'
        - '!public/storage'
        - '!resources/assets/**'
        - '!storage/**'
        - '!tests/**'

functions:
    # This function runs the Laravel website/API
    web:
        handler: Bref\LaravelBridge\Http\OctaneHandler
        runtime: php-82
        timeout: 28 # in seconds (API Gateway has a timeout of 29 seconds)
        environment:
            BREF_LOOP_MAX: 250
        events:
            - httpApi: '*'
        layers:
            - ${bref-extra:pgsql-php-82}

    # This function lets us run artisan commands in Lambda
    artisan:
        handler: artisan
        runtime: php-82-console
        timeout: 720 # in seconds
        # Uncomment to also run the scheduler every minute
        # events:
        #     - schedule:
        #         rate: rate(1 minute)
        #         input: '"schedule:run"'
        layers:
            - ${bref-extra:pgsql-php-82}

constructs:
    brefqueue:
        type: queue
        worker:
            handler: Bref\LaravelBridge\Queue\QueueHandler
            runtime: php-82
            timeout: 60 # seconds
        layers:
            - ${bref-extra:pgsql-php-82}
